{"remainingRequest":"/app/node_modules/babel-loader/lib/index.js!/app/node_modules/vue-cli-plugin-quasar/lib/loader.js.transform-quasar-imports.js!/app/node_modules/quasar/src/utils/export-file.js","dependencies":[{"path":"/app/node_modules/quasar/src/utils/export-file.js","mtime":1640775238786},{"path":"/app/babel.config.js","mtime":1641168522588},{"path":"/app/node_modules/cache-loader/dist/cjs.js","mtime":1640299636612},{"path":"/app/node_modules/babel-loader/lib/index.js","mtime":1640299636618},{"path":"/app/node_modules/vue-cli-plugin-quasar/lib/loader.js.transform-quasar-imports.js","mtime":1640775278388}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMub2JqZWN0LnRvLXN0cmluZy5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLnN0cmluZy5pdGVyYXRvci5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL3dlYi5kb20tY29sbGVjdGlvbnMuaXRlcmF0b3IuanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy93ZWIudXJsLmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvd2ViLnVybC1zZWFyY2gtcGFyYW1zLmpzIjsKCmZ1bmN0aW9uIGNsZWFuKGxpbmspIHsKICAvLyBhbGxvdyB0aW1lIGZvciBpT1MKICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHsKICAgIHdpbmRvdy5VUkwucmV2b2tlT2JqZWN0VVJMKGxpbmsuaHJlZik7CiAgfSwgMTAwMDApOwogIGxpbmsucmVtb3ZlKCk7Cn0KLyoqCiAqIEZvcmNlcyBicm93c2VyIHRvIGRvd25sb2FkIGZpbGUgd2l0aCBzcGVjaWZpZWQgY29udGVudAogKgogKiBAcGFyYW0geyp9IGZpbGVOYW1lIC0gU3RyaW5nCiAqIEBwYXJhbSB7Kn0gcmF3RGF0YSAtIFN0cmluZyB8IEFycmF5QnVmZmVyIHwgQXJyYXlCdWZmZXJWaWV3IHwgQmxvYgogKiBAcGFyYW0geyp9IG9wdHMgLSBTdHJpbmcgKG1pbWVUeXBlKSBvciBPYmplY3QKICogICAgICAgICAgICAgICAgICAgT2JqZWN0IGZvcm06IHsgbWltZVR5cGU/OiBTdHJpbmcsIGJ5dGVPcmRlck1hcms/OiBTdHJpbmcgfCBVaW50OEFycmF5LCBlbmNvZGluZz86IFN0cmluZyB9CiAqIEByZXR1cm5zIEJvb2xlYW4gfCBFcnJvcgogKgogKiBtaW1lVHlwZSAgICAgICAtIEV4YW1wbGVzOiAnYXBwbGljYXRpb24vb2N0ZWN0LXN0cmVhbScgKGRlZmF1bHQpLCAndGV4dC9wbGFpbicsICdhcHBsaWNhdGlvbi9qc29uJywKICogICAgICAgICAgICAgICAgICAndGV4dC9wbGFpbjtjaGFyc2V0PVVURi04JywgJ3ZpZGVvL21wNCcsICdpbWFnZS9wbmcnLCAnYXBwbGljYXRpb24vcGRmJwogKiAgICAgICAgICAgICAgICAgIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0hUVFAvQmFzaWNzX29mX0hUVFAvTUlNRV90eXBlcwogKgogKiBieXRlT3JkZXJNYXJrICAtIChCT00pIEV4YW1wbGU6ICdcdUZFRkYnCiAqICAgICAgICAgICAgICAgICAgaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvQnl0ZV9vcmRlcl9tYXJrCiAqCiAqIGVuY29kaW5nICAgICAgIC0gUGVyZm9ybXMgYSBUZXh0RW5jb2Rlci5lbmNvZGUoKSBvdmVyIHRoZSByYXdEYXRhOwogKiAgICAgICAgICAgICAgICAgIEV4YW1wbGU6ICd3aW5kb3dzLTEyNTInIChBTlNJLCBhIHN1YnNldCBvZiBJU08tODg1OS0xKQogKiAgICAgICAgICAgICAgICAgIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0FQSS9UZXh0RW5jb2RlcgogKi8KCgpleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiAoZmlsZU5hbWUsIHJhd0RhdGEpIHsKICB2YXIgb3B0cyA9IGFyZ3VtZW50cy5sZW5ndGggPiAyICYmIGFyZ3VtZW50c1syXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzJdIDoge307CgogIHZhciBfcmVmID0gdHlwZW9mIG9wdHMgPT09ICdzdHJpbmcnID8gewogICAgbWltZVR5cGU6IG9wdHMKICB9IDogb3B0cywKICAgICAgbWltZVR5cGUgPSBfcmVmLm1pbWVUeXBlLAogICAgICBieXRlT3JkZXJNYXJrID0gX3JlZi5ieXRlT3JkZXJNYXJrLAogICAgICBlbmNvZGluZyA9IF9yZWYuZW5jb2Rpbmc7CgogIHZhciBkYXRhID0gZW5jb2RpbmcgIT09IHZvaWQgMCA/IG5ldyBUZXh0RW5jb2RlcihlbmNvZGluZykuZW5jb2RlKFtyYXdEYXRhXSkgOiByYXdEYXRhOwogIHZhciBibG9iRGF0YSA9IGJ5dGVPcmRlck1hcmsgIT09IHZvaWQgMCA/IFtieXRlT3JkZXJNYXJrLCBkYXRhXSA6IFtkYXRhXTsKICB2YXIgYmxvYiA9IG5ldyBCbG9iKGJsb2JEYXRhLCB7CiAgICB0eXBlOiBtaW1lVHlwZSB8fCAnYXBwbGljYXRpb24vb2N0ZXQtc3RyZWFtJwogIH0pOwogIHZhciBsaW5rID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYScpOwogIGxpbmsuaHJlZiA9IHdpbmRvdy5VUkwuY3JlYXRlT2JqZWN0VVJMKGJsb2IpOwogIGxpbmsuc2V0QXR0cmlidXRlKCdkb3dubG9hZCcsIGZpbGVOYW1lKTsgLy8gQ2hlY2sgZm9yICJkb3dubG9hZCIgYXR0cmlidXRlIHN1cHBvcnQ7CiAgLy8gSWYgbm90IHN1cHBvcnRlZCwgb3BlbiB0aGlzIGluIG5ldyB3aW5kb3cKCiAgaWYgKHR5cGVvZiBsaW5rLmRvd25sb2FkID09PSAndW5kZWZpbmVkJykgewogICAgbGluay5zZXRBdHRyaWJ1dGUoJ3RhcmdldCcsICdfYmxhbmsnKTsKICB9CgogIGxpbmsuY2xhc3NMaXN0LmFkZCgnaGlkZGVuJyk7CiAgbGluay5zdHlsZS5wb3NpdGlvbiA9ICdmaXhlZCc7IC8vIGF2b2lkIHNjcm9sbGluZyB0byBib3R0b20KCiAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChsaW5rKTsKCiAgdHJ5IHsKICAgIGxpbmsuY2xpY2soKTsKICAgIGNsZWFuKGxpbmspOwogICAgcmV0dXJuIHRydWU7CiAgfSBjYXRjaCAoZXJyKSB7CiAgICBjbGVhbihsaW5rKTsKICAgIHJldHVybiBlcnI7CiAgfQp9"},{"version":3,"sources":["/app/node_modules/quasar/src/utils/export-file.js"],"names":["clean","link","setTimeout","window","URL","revokeObjectURL","href","remove","fileName","rawData","opts","mimeType","byteOrderMark","encoding","data","TextEncoder","encode","blobData","blob","Blob","type","document","createElement","createObjectURL","setAttribute","download","classList","add","style","position","body","appendChild","click","err"],"mappings":";;;;;;AAAA,SAASA,KAAT,CAAgBC,IAAhB,EAAsB;AACpB;AACAC,EAAAA,UAAU,CAAC,YAAM;AACfC,IAAAA,MAAM,CAACC,GAAP,CAAWC,eAAX,CAA2BJ,IAAI,CAACK,IAAhC;AACD,GAFS,EAEP,KAFO,CAAV;AAIAL,EAAAA,IAAI,CAACM,MAAL;AACD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,eAAe,UAAUC,QAAV,EAAoBC,OAApB,EAAwC;AAAA,MAAXC,IAAW,uEAAJ,EAAI;;AACrD,aAA8C,OAAOA,IAAP,KAAgB,QAAhB,GAC1C;AAAEC,IAAAA,QAAQ,EAAED;AAAZ,GAD0C,GAE1CA,IAFJ;AAAA,MAAQC,QAAR,QAAQA,QAAR;AAAA,MAAkBC,aAAlB,QAAkBA,aAAlB;AAAA,MAAiCC,QAAjC,QAAiCA,QAAjC;;AAIA,MAAMC,IAAI,GAAGD,QAAQ,KAAK,KAAK,CAAlB,GACR,IAAIE,WAAJ,CAAgBF,QAAhB,CAAD,CAA4BG,MAA5B,CAAmC,CAAEP,OAAF,CAAnC,CADS,GAETA,OAFJ;AAIA,MAAMQ,QAAQ,GAAGL,aAAa,KAAK,KAAK,CAAvB,GAA2B,CAAEA,aAAF,EAAiBE,IAAjB,CAA3B,GAAqD,CAAEA,IAAF,CAAtE;AACA,MAAMI,IAAI,GAAG,IAAIC,IAAJ,CAASF,QAAT,EAAmB;AAAEG,IAAAA,IAAI,EAAET,QAAQ,IAAI;AAApB,GAAnB,CAAb;AACA,MAAMV,IAAI,GAAGoB,QAAQ,CAACC,aAAT,CAAuB,GAAvB,CAAb;AAEArB,EAAAA,IAAI,CAACK,IAAL,GAAYH,MAAM,CAACC,GAAP,CAAWmB,eAAX,CAA2BL,IAA3B,CAAZ;AACAjB,EAAAA,IAAI,CAACuB,YAAL,CAAkB,UAAlB,EAA8BhB,QAA9B,EAdqD,CAgBrD;AACA;;AACA,MAAI,OAAOP,IAAI,CAACwB,QAAZ,KAAyB,WAA7B,EAA0C;AACxCxB,IAAAA,IAAI,CAACuB,YAAL,CAAkB,QAAlB,EAA4B,QAA5B;AACD;;AAEDvB,EAAAA,IAAI,CAACyB,SAAL,CAAeC,GAAf,CAAmB,QAAnB;AACA1B,EAAAA,IAAI,CAAC2B,KAAL,CAAWC,QAAX,GAAsB,OAAtB,CAvBqD,CAuBvB;;AAC9BR,EAAAA,QAAQ,CAACS,IAAT,CAAcC,WAAd,CAA0B9B,IAA1B;;AAEA,MAAI;AACFA,IAAAA,IAAI,CAAC+B,KAAL;AACAhC,IAAAA,KAAK,CAACC,IAAD,CAAL;AACA,WAAO,IAAP;AACD,GAJD,CAKA,OAAOgC,GAAP,EAAY;AACVjC,IAAAA,KAAK,CAACC,IAAD,CAAL;AACA,WAAOgC,GAAP;AACD;AACF","sourcesContent":["function clean (link) {\n  // allow time for iOS\n  setTimeout(() => {\n    window.URL.revokeObjectURL(link.href)\n  }, 10000)\n\n  link.remove()\n}\n\n/**\n * Forces browser to download file with specified content\n *\n * @param {*} fileName - String\n * @param {*} rawData - String | ArrayBuffer | ArrayBufferView | Blob\n * @param {*} opts - String (mimeType) or Object\n *                   Object form: { mimeType?: String, byteOrderMark?: String | Uint8Array, encoding?: String }\n * @returns Boolean | Error\n *\n * mimeType       - Examples: 'application/octect-stream' (default), 'text/plain', 'application/json',\n *                  'text/plain;charset=UTF-8', 'video/mp4', 'image/png', 'application/pdf'\n *                  https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types\n *\n * byteOrderMark  - (BOM) Example: '\\uFEFF'\n *                  https://en.wikipedia.org/wiki/Byte_order_mark\n *\n * encoding       - Performs a TextEncoder.encode() over the rawData;\n *                  Example: 'windows-1252' (ANSI, a subset of ISO-8859-1)\n *                  https://developer.mozilla.org/en-US/docs/Web/API/TextEncoder\n */\nexport default function (fileName, rawData, opts = {}) {\n  const { mimeType, byteOrderMark, encoding } = typeof opts === 'string'\n    ? { mimeType: opts }\n    : opts\n\n  const data = encoding !== void 0\n    ? (new TextEncoder(encoding)).encode([ rawData ])\n    : rawData\n\n  const blobData = byteOrderMark !== void 0 ? [ byteOrderMark, data ] : [ data ]\n  const blob = new Blob(blobData, { type: mimeType || 'application/octet-stream' })\n  const link = document.createElement('a')\n\n  link.href = window.URL.createObjectURL(blob)\n  link.setAttribute('download', fileName)\n\n  // Check for \"download\" attribute support;\n  // If not supported, open this in new window\n  if (typeof link.download === 'undefined') {\n    link.setAttribute('target', '_blank')\n  }\n\n  link.classList.add('hidden')\n  link.style.position = 'fixed' // avoid scrolling to bottom\n  document.body.appendChild(link)\n\n  try {\n    link.click()\n    clean(link)\n    return true\n  }\n  catch (err) {\n    clean(link)\n    return err\n  }\n}\n"]}]}